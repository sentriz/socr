// Code generated by sqlc. DO NOT EDIT.
// source: queries.pgsql

package db

import (
	"context"
	"encoding/json"
	"time"

	"go.senan.xyz/socr/backend/hasher"
)

const countDirectoriesByAlias = `-- name: CountDirectoriesByAlias :many
select
    directory_alias,
    count(1)
from
    screenshots
group by
    directory_alias
`

type CountDirectoriesByAliasRow struct {
	DirectoryAlias string `json:"directory_alias"`
	Count          int64  `json:"count"`
}

func (q *Queries) CountDirectoriesByAlias(ctx context.Context) ([]CountDirectoriesByAliasRow, error) {
	rows, err := q.query(ctx, q.countDirectoriesByAliasStmt, countDirectoriesByAlias)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountDirectoriesByAliasRow
	for rows.Next() {
		var i CountDirectoriesByAliasRow
		if err := rows.Scan(&i.DirectoryAlias, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createBlock = `-- name: CreateBlock :exec
insert into blocks (screenshot_id, index, min_x, min_y, max_x, max_y, body)
        values ($1, $2, $3, $4, $5, $6, $7)
`

type CreateBlockParams struct {
	ScreenshotID hasher.ID `json:"screenshot_id"`
	Index        int16     `json:"index"`
	MinX         int16     `json:"min_x"`
	MinY         int16     `json:"min_y"`
	MaxX         int16     `json:"max_x"`
	MaxY         int16     `json:"max_y"`
	Body         string    `json:"body"`
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) error {
	_, err := q.exec(ctx, q.createBlockStmt, createBlock,
		arg.ScreenshotID,
		arg.Index,
		arg.MinX,
		arg.MinY,
		arg.MaxX,
		arg.MaxY,
		arg.Body,
	)
	return err
}

const createScreenshot = `-- name: CreateScreenshot :one
insert into screenshots (id, timestamp, directory_alias, filename, dim_width, dim_height, dominant_colour, blurhash)
    values ($1, $2, $3, $4, $5, $6, $7, $8)
returning
    id, timestamp, directory_alias, filename, dim_width, dim_height, dominant_colour, blurhash
`

type CreateScreenshotParams struct {
	ID             hasher.ID `json:"id"`
	Timestamp      time.Time `json:"timestamp"`
	DirectoryAlias string    `json:"directory_alias"`
	Filename       string    `json:"filename"`
	DimWidth       int32     `json:"dim_width"`
	DimHeight      int32     `json:"dim_height"`
	DominantColour string    `json:"dominant_colour"`
	Blurhash       string    `json:"blurhash"`
}

func (q *Queries) CreateScreenshot(ctx context.Context, arg CreateScreenshotParams) (Screenshot, error) {
	row := q.queryRow(ctx, q.createScreenshotStmt, createScreenshot,
		arg.ID,
		arg.Timestamp,
		arg.DirectoryAlias,
		arg.Filename,
		arg.DimWidth,
		arg.DimHeight,
		arg.DominantColour,
		arg.Blurhash,
	)
	var i Screenshot
	err := row.Scan(
		&i.ID,
		&i.Timestamp,
		&i.DirectoryAlias,
		&i.Filename,
		&i.DimWidth,
		&i.DimHeight,
		&i.DominantColour,
		&i.Blurhash,
	)
	return i, err
}

const getAllScreenshots = `-- name: GetAllScreenshots :many
select
    id, timestamp, directory_alias, filename, dim_width, dim_height, dominant_colour, blurhash
from
    screenshots
`

func (q *Queries) GetAllScreenshots(ctx context.Context) ([]Screenshot, error) {
	rows, err := q.query(ctx, q.getAllScreenshotsStmt, getAllScreenshots)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Screenshot
	for rows.Next() {
		var i Screenshot
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.DirectoryAlias,
			&i.Filename,
			&i.DimWidth,
			&i.DimHeight,
			&i.DominantColour,
			&i.Blurhash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScreenshotByID = `-- name: GetScreenshotByID :one
select
    id, timestamp, directory_alias, filename, dim_width, dim_height, dominant_colour, blurhash
from
    screenshots
where
    id = $1
limit 1
`

func (q *Queries) GetScreenshotByID(ctx context.Context, id hasher.ID) (Screenshot, error) {
	row := q.queryRow(ctx, q.getScreenshotByIDStmt, getScreenshotByID, id)
	var i Screenshot
	err := row.Scan(
		&i.ID,
		&i.Timestamp,
		&i.DirectoryAlias,
		&i.Filename,
		&i.DimWidth,
		&i.DimHeight,
		&i.DominantColour,
		&i.Blurhash,
	)
	return i, err
}

const getScreenshotByPath = `-- name: GetScreenshotByPath :one
select
    id, timestamp, directory_alias, filename, dim_width, dim_height, dominant_colour, blurhash
from
    screenshots
where
    directory_alias = $1
    and filename = $2
limit 1
`

type GetScreenshotByPathParams struct {
	DirectoryAlias string `json:"directory_alias"`
	Filename       string `json:"filename"`
}

func (q *Queries) GetScreenshotByPath(ctx context.Context, arg GetScreenshotByPathParams) (Screenshot, error) {
	row := q.queryRow(ctx, q.getScreenshotByPathStmt, getScreenshotByPath, arg.DirectoryAlias, arg.Filename)
	var i Screenshot
	err := row.Scan(
		&i.ID,
		&i.Timestamp,
		&i.DirectoryAlias,
		&i.Filename,
		&i.DimWidth,
		&i.DimHeight,
		&i.DominantColour,
		&i.Blurhash,
	)
	return i, err
}

const searchScreenshots = `-- name: SearchScreenshots :many
select
    screenshots.id, screenshots.timestamp, screenshots.directory_alias, screenshots.filename, screenshots.dim_width, screenshots.dim_height, screenshots.dominant_colour, screenshots.blurhash,
    json_agg(blocks) blocks
from
    screenshots
    join blocks on blocks.screenshot_id = screenshots.id
where ($1::text) % blocks.body
group by
    screenshots.id
limit $3 offset $2
`

type SearchScreenshotsParams struct {
	Body string `json:"body"`
	Off  int32  `json:"off"`
	Lim  int32  `json:"lim"`
}

type SearchScreenshotsRow struct {
	ID             hasher.ID       `json:"id"`
	Timestamp      time.Time       `json:"timestamp"`
	DirectoryAlias string          `json:"directory_alias"`
	Filename       string          `json:"filename"`
	DimWidth       int32           `json:"dim_width"`
	DimHeight      int32           `json:"dim_height"`
	DominantColour string          `json:"dominant_colour"`
	Blurhash       string          `json:"blurhash"`
	Blocks         json.RawMessage `json:"blocks"`
}

func (q *Queries) SearchScreenshots(ctx context.Context, arg SearchScreenshotsParams) ([]SearchScreenshotsRow, error) {
	rows, err := q.query(ctx, q.searchScreenshotsStmt, searchScreenshots, arg.Body, arg.Off, arg.Lim)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchScreenshotsRow
	for rows.Next() {
		var i SearchScreenshotsRow
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.DirectoryAlias,
			&i.Filename,
			&i.DimWidth,
			&i.DimHeight,
			&i.DominantColour,
			&i.Blurhash,
			&i.Blocks,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
