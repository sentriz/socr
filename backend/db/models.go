// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"fmt"
	"time"
)

type Filetype string

const (
	FiletypeGIF Filetype = "GIF"
	FiletypePNG Filetype = "PNG"
	FiletypeJPG Filetype = "JPG"
)

func (e *Filetype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Filetype(s)
	case string:
		*e = Filetype(s)
	default:
		return fmt.Errorf("unsupported scan type for Filetype: %T", src)
	}
	return nil
}

type Block struct {
	ScreenshotID int64  `json:"screenshot_id"`
	MinX         int32  `json:"min_x"`
	MinY         int32  `json:"min_y"`
	MaxX         int32  `json:"max_x"`
	MaxY         int32  `json:"max_y"`
	Body         string `json:"body"`
}

type Directory struct {
	ID      int32  `json:"id"`
	Alias   string `json:"alias"`
	RelPath string `json:"rel_path"`
}

type Screenshot struct {
	ID        int64     `json:"id"`
	Stamp     time.Time `json:"stamp"`
	Directory int32     `json:"directory"`
	Filename  string    `json:"filename"`
	Filetype  Filetype  `json:"filetype"`
}

type ScreenshotProperty struct {
	ID             int64          `json:"id"`
	DimWidth       sql.NullInt32  `json:"dim_width"`
	DimHeight      sql.NullInt32  `json:"dim_height"`
	DominantColour sql.NullString `json:"dominant_colour"`
	Blurhash       sql.NullString `json:"blurhash"`
}

type Tag struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type TagScreenshot struct {
	TagID        int64 `json:"tag_id"`
	ScreenshotID int32 `json:"screenshot_id"`
}
