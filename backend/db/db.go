// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createBlockStmt, err = db.PrepareContext(ctx, createBlock); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBlock: %w", err)
	}
	if q.createScreenshotStmt, err = db.PrepareContext(ctx, createScreenshot); err != nil {
		return nil, fmt.Errorf("error preparing query CreateScreenshot: %w", err)
	}
	if q.getAllScreenshotsStmt, err = db.PrepareContext(ctx, getAllScreenshots); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllScreenshots: %w", err)
	}
	if q.getScreenshotByIDStmt, err = db.PrepareContext(ctx, getScreenshotByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetScreenshotByID: %w", err)
	}
	if q.searchBlockStmt, err = db.PrepareContext(ctx, searchBlock); err != nil {
		return nil, fmt.Errorf("error preparing query SearchBlock: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createBlockStmt != nil {
		if cerr := q.createBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBlockStmt: %w", cerr)
		}
	}
	if q.createScreenshotStmt != nil {
		if cerr := q.createScreenshotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createScreenshotStmt: %w", cerr)
		}
	}
	if q.getAllScreenshotsStmt != nil {
		if cerr := q.getAllScreenshotsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllScreenshotsStmt: %w", cerr)
		}
	}
	if q.getScreenshotByIDStmt != nil {
		if cerr := q.getScreenshotByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getScreenshotByIDStmt: %w", cerr)
		}
	}
	if q.searchBlockStmt != nil {
		if cerr := q.searchBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing searchBlockStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	createBlockStmt       *sql.Stmt
	createScreenshotStmt  *sql.Stmt
	getAllScreenshotsStmt *sql.Stmt
	getScreenshotByIDStmt *sql.Stmt
	searchBlockStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createBlockStmt:       q.createBlockStmt,
		createScreenshotStmt:  q.createScreenshotStmt,
		getAllScreenshotsStmt: q.getAllScreenshotsStmt,
		getScreenshotByIDStmt: q.getScreenshotByIDStmt,
		searchBlockStmt:       q.searchBlockStmt,
	}
}
